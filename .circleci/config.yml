version: 2
jobs:
  test:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - run:
          name: Installing dependencies
          command: |
            docker-compose run --rm -e RAILS_ENV=test web rails test

      - run:
          name: Building Docker throught docker-compose
          command: docker-compose build

      - run:
          name: Creating database and running migrations
          command: |
            docker-compose run --rm -e RACK_ENV=test api rake db:setup
            docker-compose run --rm -e RACK_ENV=test api rake db:migrate
            docker-compose run --rm -e RACK_ENV=test api rake db:seed

      - run:
          name: Running and Storing tests
          command: |
            mkdir ~/rspec
            docker-compose run --name api -e RACK_ENV=test api "rspec -r rspec_junit_formatter --format RspecJunitFormatter -o ./junit.xml"
            docker cp api:/sorting-hat/junit.xml ~/rspec/junit.xml
            docker stop $(docker ps -aq)
          when: always
      - store_test_results:
          path: ~/rspec

  deploy_branch:
    docker:
      - image: circleci/ruby:2.4.1
    environment:
      DEPLOY_ENV: integration
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Installing dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python-dev
            sudo apt-get install python-pip
            sudo pip install awscli --upgrade
      - run:
          name: Building Docker image
          command: |
            $(aws ecr get-login --no-include-email)
            docker build -t $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1 .
      - run:
          name: Pushing Docker Image to AWS
          command: |
            docker info
            docker tag $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1 $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:latest
            docker push $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
            docker push $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:latest
      - run:
          name: Image Publication Announcements
          command: ./.circleci/slack-notificator-publish-image.sh
      - run:
          name: Deploy sorting-hat
          command: ./.circleci/chat-deploy.sh
      - run:
          name: Deploy Announcements
          command: ./.circleci/slack-notificator-deploy.sh

  deploy_tag:
    docker:
      - image: circleci/ruby:2.4.1
    environment:
      DEPLOY_ENV: sandbox
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Installing dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python-dev
            sudo apt-get install python-pip
            sudo pip install awscli --upgrade
      - run:
          name: Building Docker image
          command: |
            $(aws ecr get-login --no-include-email)
            docker build -t $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG .
      - run:
          name: Publish sorting-hat Image in AWS ECS Repository
          command: |
            docker info
            docker tag $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:latest
            docker push $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            docker push $DOCKER_REGISTRY/$CIRCLE_PROJECT_REPONAME:latest
      - run:
          name: Image Publication Announcements
          command: ./.circleci/slack-notificator-publish-image.sh
      - run:
          name: Deploy sorting-hat
          command: ./.circleci/chat-deploy.sh
      - run:
          name: Deploy Announcements
          command: ./.circleci/slack-notificator-deploy.sh

workflows:
  version: 2
  build:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - deploy_branch:
          requires:
            - test
          filters:
            tags:
              ignore: /.*/
            branches:
              only: integration
      - deploy_tag:
          requires:
            - test
          filters:
            tags:
              only: /release-.*/
            branches:
              ignore: /.*/
